@inject IJSRuntime Js
<DemoNavbarDropDown Title="Theme Color" Label="Select Theme Color" Icon="@SelectedThemeIcon">
    <div class="input-group">
        <span class="input-group-text fs-4">
            <BlazorIcon Icon="@SelectedThemeIcon" />
        </span>
        <select id="typeInput" class="form-select" @bind="@SelectedTheme" @oninput="OnSelectedThemeChange">
            <option value="@Auto">@Auto</option>
            <option value="@Light">@Light</option>
            <option value="@Dark">@Dark</option>
        </select>
    </div>
</DemoNavbarDropDown>


@code {
    private const string Auto = nameof(Auto);
    private const string Light = nameof(Light);
    private const string Dark = nameof(Dark);

    private string SelectedTheme { get; set; } = Auto;
    private string SelectedThemeIcon => SelectedTheme switch
    {
        Auto => BootstrapIcons.CircleHalf,
        Light => BootstrapIcons.SunFill,
        Dark => BootstrapIcons.MoonStarsFill,
        _ => throw new ArgumentOutOfRangeException()
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SelectedTheme = await Js.InvokeAsync<string>("window.getUserPreferredTheme");

        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnSelectedThemeChange(ChangeEventArgs obj)
    {
        await Js.InvokeVoidAsync("window.setUserPreferredTheme", obj.Value);
    }
}
