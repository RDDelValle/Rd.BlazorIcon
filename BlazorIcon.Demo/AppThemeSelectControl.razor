@inject IJSRuntime Js
<div class="input-group">
    <span class="input-group-text fs-4">
        @switch (SelectedTheme)
        {
            case Auto:
                <BootstrapIcon Icon="@BootstrapIcons.CircleHalf" />
                break;
            case Light:
                <BootstrapIcon Icon="@BootstrapIcons.SunFill" />
                break;
            case Dark:
                <BootstrapIcon Icon="@BootstrapIcons.MoonStarsFill" />
                break;
        }
    </span>
    <select id="typeInput"
            class="form-select"
            @bind="@SelectedTheme"
            @oninput="OnSelectedThemeChange">
        <option value="@Auto">@Auto</option>
        <option value="@Light">@Light</option>
        <option value="@Dark">@Dark</option>
    </select>
</div>

@code {

    public const string Auto = nameof(Auto);
    public const string Light = nameof(Light);
    public const string Dark = nameof(Dark);
    private string SelectedTheme { get; set; } = Auto;

    protected override async Task OnInitializedAsync()
    {
        SelectedTheme = await Js.InvokeAsync<string>("window.getUserPreferredTheme");
    }

    private async Task OnSelectedThemeChange(ChangeEventArgs obj)
    {
        await Js.InvokeVoidAsync("window.setUserPreferredTheme", obj.Value);
    }

}